Details Regarding "headers.h"
It contains the imlementation of Graph and all of it's functionalities.
For Each User Action We created a struct with 
actionId: id of the action type, 
actionType: LIKE, COMMENT OR POST, 
userId: Id of node that generated that action, 
userDegree: degree of node that generated the action(no of neighbours of that node)
actionTime: time of generating action.

We created a struct for Node(or user) which has following variables
current: current node id,
orderType: type in which the feed queue will be read Chronological or Priority wise,
actionCount: vectors of action generated by node,
nbrs: unordered set of neighbours so that the neighbours do not repeat,

Next we have a class named Graph, which has vector of nodes named nodelist, int nodeCount to keep track of current number of nodes in the graph.
This class contains the constructor which initializes the class Graph.

This class has a funciton init which basically loads the graph from the file to memory
We used class for graph so that we can create our own function for graph for easy accessibility.

In the graph we have MAX number of nodes = 37700 and MAX edges = 289003.
In the whole graph we have MAX degree as 9458
For the size of wall and feed queue we just assigned the almost the double the value of MAX_NODES in the graph
--------------------------------------------------------------------------------------------------------
For "sns.cpp"

We are using lock for Pushing into the global feed since it is monitored by 2 threads so it requires mutual exclusion.
We are using lock for writing into the sns log file since it is also used my many threads to write inside it.
We are using lock in pushUpdate for pushing all the action to neighbour of user.
We are using lock for writing to sns file in pushUpdate.
